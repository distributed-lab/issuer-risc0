// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
#[allow(unused_imports)] // Not using METHOD_ID
use methods::{METHOD_ELF, METHOD_ID};

use issuer_core::{CountNullifiersInput, CountNullifiersJournal};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde_json::from_reader;
use std::fs::File;
use std::path::PathBuf;
use structopt::StructOpt;

/// Command line arguments for the program.
#[derive(Debug, StructOpt)]
struct CliArgs {
    /// Path to the JSON input file.
    input_file: PathBuf,
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Parse command line arguments
    let args = CliArgs::from_args();

    // Open the JSON input file
    let file = File::open(args.input_file).expect("Unable to open input file");

    // Deserialize JSON input to CountNullifiersInput
    let input: CountNullifiersInput = from_reader(file).expect("Unable to parse JSON input");

    // Initialize the environment and write an input.
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, METHOD_ELF).unwrap();

    let receipt = prove_info.receipt;
    let output: CountNullifiersJournal = receipt.journal.decode().unwrap();

    println!("Journal: {output}");
}
